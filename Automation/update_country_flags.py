#!/usr/bin/env python3
# encoding: utf-8

"""
This script:
    1) Reads all country flags from the asset catalog
    2) Downloads country data JSON for country names
    3) Regenerates a swift file to access the flags through an enum
"""

import sys
import os
import pathlib
import urllib.request
import json

source_header = '''
// Generated by 'Automation/update_country_flags.py'
'''

source_template = source_header + '''public extension CountryFlag {{

    enum CountryCode: String, CaseIterable, Sendable {{
{cases}
    }}
}}
'''

def kebab_case_to_camel_case(string):
    head, *tail = string.split("-")
    return "".join([head.lower()] + [x.title() for x in tail])

def valid_case_name(string):
    if string in ["as", "do", "in", "is"]:
        return f"`{string}`"
    else:
        return string

if __name__ == "__main__":
    
    flags_folder = pathlib.Path(sys.argv[1])
    
    country_names = sorted([pathlib.Path(x).stem for x in os.listdir(str(flags_folder) + "/CountryFlags.xcassets") if x.endswith("imageset")])
    
    response = urllib.request.urlopen("https://static-data.kiwi.com/countries.json")
    countries_json = json.loads(response.read())

    case_lines = []

    for country_name in country_names:
        case_name = valid_case_name(kebab_case_to_camel_case(country_name))
        case_lines.append("")
        
        if country_name in countries_json:
            country_name = countries_json[country_name]["EN"]
            case_lines.append(f"        /// Country code for {country_name}")
        
        case_lines.append(f"        case {case_name}")
            
    updated_file_content = source_template.format(cases = '\n'.join(case_lines))
    flags_generated_file_path = flags_folder.joinpath("CountryFlags.swift")
    
    with open(flags_generated_file_path, "w+") as source_file:
        source_file.write(updated_file_content)
